/*==============================================================================================================================
* Arduino Nano (main control)
* OLED SSD1306 (qua I2C)
* Cảm biến DHT11
* Bluetooth module (HC-05) (thông qua SoftwareSerial)
==============================================================================================================================*/

#include <SoftwareSerial.h>
#include <String.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "DHT.h"
//#include <DFMiniMp3.h>

// led rgb
#define REDPIN 5
#define GREENPIN 6
#define BLUEPIN 3

#include <RTClib.h>
#include <Wire.h>
RTC_DS3231 rtc;
char t[32];

int in3 = A2;
int in4 = A3;
int enB = 11;
int j;
int slash[2] = {0, 0};
int rval, gval, bval;

byte relay1 = 8, relay2 = 7;

class Mp3Notify;
SoftwareSerial secondarySerial(10, 2); // RX, TX
typedef DFMiniMp3<SoftwareSerial, Mp3Notify> DfMp3;
DfMp3 dfmp3(secondarySerial);
class Mp3Notify
{
  public:
    static void PrintlnSourceAction(DfMp3_PlaySources source, const char* action)
    {
      if (source & DfMp3_PlaySources_Sd)
      {
        Serial.print("SD Card, ");
      }
      if (source & DfMp3_PlaySources_Usb)
      {
        Serial.print("USB Disk, ");
      }
      if (source & DfMp3_PlaySources_Flash)
      {
        Serial.print("Flash, ");
      }
      Serial.println(action);
    }
    static void OnError([[maybe_unused]] DfMp3& mp3, uint16_t errorCode)
    {
      // see DfMp3_Error for code meaning
      Serial.println();
      Serial.print("Com Error ");
      Serial.println(errorCode);
    }
    static void OnPlayFinished([[maybe_unused]] DfMp3& mp3, [[maybe_unused]] DfMp3_PlaySources source, uint16_t track)
    {
      Serial.print("Play finished for #");
      Serial.println(track);

      // start next track
      track += 1;
      // this example will just start back over with 1 after track 3
      if (track > 3)
      {
        track = 1;
      }
      dfmp3.playMp3FolderTrack(track);  // sd:/mp3/0001.mp3, sd:/mp3/0002.mp3, sd:/mp3/0003.mp3
    }
    static void OnPlaySourceOnline([[maybe_unused]] DfMp3& mp3, DfMp3_PlaySources source)
    {
      PrintlnSourceAction(source, "online");
    }
    static void OnPlaySourceInserted([[maybe_unused]] DfMp3& mp3, DfMp3_PlaySources source)
    {
      PrintlnSourceAction(source, "inserted");
    }
    static void OnPlaySourceRemoved([[maybe_unused]] DfMp3& mp3, DfMp3_PlaySources source)
    {
      PrintlnSourceAction(source, "removed");
    }
};


SoftwareSerial mySerial(4, 9); // RX, TX

String data;
void waitMilliseconds(uint16_t msWait)
{
  uint32_t start = millis();

  while ((millis() - start) < msWait)
  {
    // if you have loops with delays, its important to
    // call dfmp3.loop() periodically so it allows for notifications
    // to be handled without interrupts
    dfmp3.loop();
    delay(1);
  }



}
const int giomomotor = 17;
const int phutmomotor = 05;
const int giaymomotor = 00;

const int giomomotor2 = 17;
const int phutmomotor2 = 06;
const int giaymomotor2 = 00;

const int giomomotor3 = 17;
const int phutmomotor3 = 07;
const int giaymomotor3 = 00;


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for SSD1306 display connected using I2C
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

char text[] = "NHO LAM KTRA";
unsigned long previousMillis = 0;
const unsigned long interval = 10000; // Delay interval in milliseconds

bool updateDisplay = true; // Flag variable to control display update


const int DHTPIN = 12;       //Đọc dữ liệu từ DHT11 ở chân 2 trên mạch Arduino
const int DHTTYPE = DHT11;  //Khai báo loại cảm biến, có 2 loại là DHT11 và DHT22

DHT dht(DHTPIN, DHTTYPE);
float humi;
float temp;


void setup() {
  Serial.begin(9600);
  Serial.println("initializing...");
  pinMode(relay1 , OUTPUT);
  pinMode (relay2 , OUTPUT);
  // led rgb
  pinMode(REDPIN, OUTPUT);
  pinMode(GREENPIN, OUTPUT);
  pinMode(BLUEPIN, OUTPUT);

  Wire.begin();
  rtc.begin();
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  //rtc.adjust(DateTime(2019, 1, 21, 5, 0, 0));

  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  dfmp3.begin();
  // for boards that support hardware arbitrary pins
  // dfmp3.begin(10, 11); // RX, TX

  uint16_t version = dfmp3.getSoftwareVersion();
  Serial.print("version ");
  Serial.println(version);

  uint16_t volume = dfmp3.getVolume();
  Serial.print("volume ");
  Serial.println(volume);
  dfmp3.setVolume(30);

  uint16_t count = dfmp3.getTotalTrackCount(DfMp3_PlaySource_Sd);
  Serial.print("files ");
  Serial.println(count);

  Serial.println("starting...");

  // start the first track playing

  Serial.println("Goodnight moon!");
  mySerial.begin(9600);

  dht.begin();         // Khởi động cảm biến

  // initialize the OLED object
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }



}
void loop() {
  if (Serial.available()) {
    data = Serial.readStringUntil("\n");
    data.trim();
    rgbread ();

    Serial.println(data);
  }
  analogWrite (REDPIN, rval);
  analogWrite (GREENPIN, gval);
  analogWrite (BLUEPIN, bval);

  humi = dht.readHumidity();    //Đọc độ ẩm
  temp = dht.readTemperature(); //Đọc nhiệt độ

  Serial.print("Nhiet do: ");
    Serial.println(temp);               //Xuất nhiệt độ
    Serial.print("Do am: ");
    Serial.println(humi);               //Xuất độ ẩm

    Serial.println();               //Xuống hàng
  delay(1000);                     //Đợi 1 giây

  unsigned long currentMillis = millis(); // Get the current time

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis; // Update the previous time

    updateDisplay = true; // Set the flag to update the display
  }

  if (updateDisplay) {
    oled_display(); // Update the OLED display

    updateDisplay = false; // Reset the flag after display update
  }


  if (data == "button_on")
    digitalWrite (relay1, HIGH);
  if (data == "button_off")
    digitalWrite (relay1, LOW);

  if (data == "feed") {
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    analogWrite(enB, 50);
    delay (200);
    analogWrite(enB, 0);
    data = "none";
  }


  if (data == "feedon") {
    DateTime now = rtc.now();
    sprintf(t, "%02d:%02d:%02d %02d/%02d/%02d", now.hour(), now.minute(), now.second(), now.day(), now.month(), now.year());
    Serial.print(F(" "));
    Serial.println(t);
    delay(1000);

    if (now.hour() == giomomotor && now.minute() == phutmomotor && now.second() == giaymomotor)
    {
      Serial.println("Motor ON");
      digitalWrite(in3, HIGH);
      digitalWrite(in4, LOW);
      analogWrite(enB, 40);
      delay(800);
      digitalWrite(in3, LOW);
      digitalWrite(in4, LOW);
    }

    if (now.hour() == giomomotor2 && now.minute() == phutmomotor2 && now.second() == giaymomotor2)
    {
      Serial.println("Motor ON");
      digitalWrite(in3, HIGH);
      digitalWrite(in4, LOW);
      analogWrite(enB, 40);
      delay(800);
      digitalWrite(in3, LOW);
      digitalWrite(in4, LOW);
    }

    if (now.hour() == giomomotor3 && now.minute() == phutmomotor3 && now.second() == giaymomotor3)
    {
      Serial.println("Motor ON");
      digitalWrite(in3, HIGH);
      digitalWrite(in4, LOW);
      analogWrite(enB, 40);
      delay(800);
      digitalWrite(in3, LOW);
      digitalWrite(in4, LOW);
    }
  }

  if (data == "music1") 
    dfmp3.playMp3FolderTrack(1); waitMilliseconds(10000);
      if (data == "music2") 
    dfmp3.playMp3FolderTrack(2); waitMilliseconds(10000);
      if (data == "music3") 
    dfmp3.playMp3FolderTrack(3); waitMilliseconds(10000);
      if (data == "music4") 
    dfmp3.playMp3FolderTrack(4); waitMilliseconds(10000);
      if (data == "music5") 
    dfmp3.playMp3FolderTrack(5); waitMilliseconds(10000);
      if (data == "music6") 
    dfmp3.playMp3FolderTrack(6); waitMilliseconds(10000);
      if (data == "music7") 
    dfmp3.playMp3FolderTrack(7); waitMilliseconds(10000);
      if (data == "music8") 
    dfmp3.playMp3FolderTrack(8); waitMilliseconds(10000);
      if (data == "music9") 
    dfmp3.playMp3FolderTrack(9); waitMilliseconds(10000);
    
}

void oled_display() {
  // Scroll part of the screen
  display.clearDisplay();
  display.setTextColor(WHITE);

  display.setCursor(0, 8);
  display.setTextSize(1);
  display.print("Temperature:");
  display.print(temp);
  display.print((char)247);
  display.print("C ");
  display.print(" ");
  display.print("Humidity:");
  display.print(humi);
  display.print((char)247);
  display.print("% ");

  display.display();
  display.startscrollright(0x00, 0x07);

}

void rgbread () {
  if (data.length() >= 6) {
    for (int i = 0; i <= data.length(); i++) {

      if (data[i] == '/') {
        slash[j] = i;
        j++;
      }
    }
  }

  /*for (int i = 0; i < 2; i++)
    Serial.print (slash[i]);
    Serial.println ();*/
  rval = data.substring(3, slash[0]).toInt();
  gval = data.substring(slash[0] + 1, slash[1]).toInt();
  bval = data.substring(slash[1] + 1, data.length()).toInt();
  Serial.println (rval);

  Serial.println (gval);

  Serial.println (bval);
  Serial.println ();
  delay(500);
  j = 0;
}
